## Workflow for building and deploying into SAP Commerce cloud CCV2 dev 
env:
  BRANCH_NAME: ${{ github.head_ref || github.ref_name }}
  BUILD_NAME:  D1.BUILD.$(date +'%Y.%m.%d.%H.%M')
  DATABASE_UPDATE_MODE: UPDATE
  DEPLOYMENT_STRATEGY: ROLLING_UPDATE
  ENVIRONMENT_CODE: d1
  CCV2_URL: https://portalrotapi.hana.ondemand.com/v2/subscriptions
  CCV2_AUTH_ACCESS_TOKEN: ${{ secrets.CCV2_AUTH_ACCESS_TOKEN }}
  CCV2_SUBSCRIPTION_CODE: ${{ secrets.CCV2_SUBSCRIPTION_CODE }}
  CCV2_BASE_URL : https://portalrotapi.hana.ondemand.com/v2/subscriptions/${{secrets.CCV2_SUBSCRIPTION_CODE}}
name: 'PARTIAL PIPELINE - PR CREATED'
on:
  pull_request:
    branches:
      - develop
    types:
      - opened
  workflow_dispatch:
    inputs:
      buildStep:
        description: 'Build/Deploy:'
        required: true
        default: 'build'
        type: choice
        options:
          - build
          - deploy
      buildNo:
        description: 'Build No:'
        required: false
        type: string
jobs:
  VALIDATION:
    if: ${{github.event_name == 'pull_request'}}
    name: VALIDATION
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Shallow clones should be disabled for a better relevancy of analysis
      - name: SONAR CHECK
        uses: SonarSource/sonarcloud-github-action@master
        env:
                  SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      # This action sets up the JFrog CLI with the Artifactory URL and access token 
      - name: Setup JFrog CLI
        uses: jfrog/setup-jfrog-cli@v3
        env:
          # JFrog platform url (for example: https://acme.jfrog.io)
          JF_URL: ${{ secrets.JF_URL }}
          # JFrog Platform access token npm
          JF_ACCESS_TOKEN: ${{ secrets.JF_ACCESS_TOKEN }}
          # JFrog Platform access token for docker
          JF_ACCESS_TOKEN_DOCKER: ${{ secrets.JF_ACCESS_TOKEN_DOCKER }}
          # JFrog Platform access token for generic
          JF_ACCESS_TOKEN_GENERIC: ${{ secrets.JF_ACCESS_TOKEN_GENERIC }}
          # Basic authentication credentials
          JF_USER: ${{ secrets.JF_USER }}
          JF_PASSWORD: ${{ secrets.JF_PASSWORD }}
          TAG: $(date +'%Y.%m.%d.%H.%M')
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          python -m pip install numpy pytest
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Build the Docker image
        run: docker build . --file Dockerfile --tag commerce-s1:v1
      # Build and push to JFrog Artifactory
      - name: Build and push to JFrog artifactory
        run: |
          jf c add --url https://fffenterprises.jfrog.io --user=sgajul@fffenterprises.com --password=AKCp8pRjLx9LhEKprtf2P6kuTNjMuoZXkjcFbmMk9LLSvca7Hqu3N9dGtuwPYYzAPEfWiDN6J commerce-d1
          docker images
          jf docker tag commerce-s1:v1 fffenterprises.jfrog.io/fff-commercecloud-develop/commerce-s1:v1 --project=fff --server-id=commerce-d1
          jf docker push fffenterprises.jfrog.io/fff-commercecloud-develop/commerce-s1:v1 --project=fff --server-id=commerce-d1
              
      - name: INTEGRATION TESTING (MOCK)
        run: |
          echo "Run your integration tests(mock) here!"
  SAPCOM_BUILD:
    if: ${{github.event_name == 'workflow_dispatch' && github.event.inputs.buildStep == 'build'}}
    name: BUILD
    runs-on: ubuntu-latest
    environment: 'dev'
    steps:
      - name: Create Build
        run: |
          #!/bin/bash
          echo "build_step: {{github.event.inputs.buildStep}}"
          echo "URL: ${{env.CCV2_BASE_URL}}"
          echo "BUILD_NAME : ${{ env.BUILD_NAME }}"
          ccv2_build_url="${{env.CCV2_BASE_URL}}/builds";
          payload='{"branch": "${{ env.BRANCH_NAME}}", "name": "'"${{ env.BUILD_NAME }}"'"}';
          echo "Payload :: $payload"
          buildcode=$(curl --location --request POST "$ccv2_build_url" --header 'Content-Type: application/json' --header "Authorization: Bearer ${{env.CCV2_AUTH_ACCESS_TOKEN}}" --data-raw "$payload" | jq '.code')
          echo "buildcode=$buildcode" >> $GITHUB_ENV
          echo "Create Build Response:  $buildcode"
      - name: Check Build Progress
        run: |
         echo "Check Build progress of buildcode : ${{ env.buildcode }}"
         ccv2_build_url="${{env.CCV2_BASE_URL}}/builds";
         while (true) 
           do
              echo "checkBuild buildcode : ${{ env.buildcode }}"
              progress_ccv2_build_url="$ccv2_build_url/${{ env.buildcode }}/progress"
              echo "URL: $progress_ccv2_build_url"
              buildresponse=$(curl --location --request GET "$progress_ccv2_build_url" --header "Authorization: Bearer ${{env.CCV2_AUTH_ACCESS_TOKEN}}")
              buildStatus=$(jq -n "$buildresponse" | jq '.buildStatus')
              percentage=$(jq -n "$buildresponse" | jq '.percentage')
              echo "Check Progress Status: $buildStatus"
              if [ $buildStatus = '"SUCCESS"' ];then
                echo "Build Succeeded" 
                break
              elif [ $buildStatus  = '"FAIL"' ];then
                echo "Failed"
                exit 1
              else
                echo "Build inProgress.. $percentage % completed" 
                sleep 600
              fi
           done
          echo "Build Completed"
        shell: bash  
  SAPCOM_DEPLOY:
    if: ${{github.event_name == 'workflow_dispatch' && github.event.inputs.buildStep == 'deploy' && github.event.inputs.buildNo != ''}}
    name: DEPLOY
    runs-on: ubuntu-latest
    environment: 'dev'
    steps:    
      - name: Create Deployment
        run: |
          #!/bin/bash
          echo "URL: ${{env.CCV2_BASE_URL}}"
          ccv2_deployment_url="${{env.CCV2_BASE_URL}}/deployments";
          echo "Deployment URL: $ccv2_deployment_url"
          echo "Branch name: ${{env.BRANCH_NAME}}"
          environmentCode="${{env.ENVIRONMENT_CODE}}";
          if [[ ${{env.BRANCH_NAME}} == "release/"* ]];then
            environmentCode="s1"
          fi
          payload='{"buildCode": ${{ github.event.inputs.buildNo }}, "databaseUpdateMode": "UPDATE", "environmentCode": "'"$environmentCode"'", "strategy": "ROLLING_UPDATE"}';
          echo "Payload: $payload"
          deploymentcode=$(curl --location --request POST "$ccv2_deployment_url" --header 'Content-Type: application/json' --header "Authorization: Bearer ${{env.CCV2_AUTH_ACCESS_TOKEN}}" --data-raw "$payload" | jq '.code')
          echo "deploymentcode=$deploymentcode" >> $GITHUB_ENV
          echo "Create Deployment Response:  $deploymentcode" 
      - name: Check Deployment Progress
        run: |
         echo "Check Deployment progress of deployment code : ${{ env.deploymentcode }}"
         ccv2_deployment_url="${{env.CCV2_BASE_URL}}/deployments";
         while (true) 
           do
              echo "checkdeployment progress for code : ${{ env.deploymentcode }}"
              ccv2_deployment_progress_url="$ccv2_deployment_url/${{env.deploymentcode}}/progress"
              echo "URL: $progress_ccv2_deployment_url"
              deploymentresponse=$(curl --location --request GET "$ccv2_deployment_progress_url" --header "Authorization: Bearer ${{env.CCV2_AUTH_ACCESS_TOKEN}}")
              deploymentStatus=$(jq -n "$deploymentresponse" | jq '.deploymentStatus')
              percentage=$(jq -n "$deploymentresponse" | jq '.percentage')
              echo "Check Progress Status: $deploymentStatus"
              if [ $deploymentStatus = '"DEPLOYED"' ];then
                echo "Deployment Succeeded" 
                break
              elif [ $deploymentStatus  = '"FAIL"' ];then
                echo "Failed"
                exit 1
              else
                echo "Deployment inProgress.. $percentage % completed" 
                sleep 600
              fi
           done
          echo "Deployment Completed"
        shell: bash 
  INTEGRATION_E2E:
    name: INTEGRATION TESTING (E2E)
    runs-on: ubuntu-latest
    needs: SAPCOM_DEPLOY
    steps:    
      - name: INTEGRATION TESTING (E2E)
        run: |
          echo "Run your integration tests(E2E) here!" 
  REGRESSION:
    name: REGRESSION TESTING
    runs-on: ubuntu-latest
    needs: INTEGRATION_E2E
    steps:    
      - name: Regression Tests
        run: |
          echo "Run your regression tests here!"
      